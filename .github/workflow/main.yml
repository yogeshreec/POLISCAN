  name: Upload ETL Script & Trigger Job

  on:
    push:
      branches:
        - main

  jobs:
    upload-and-run-etl:
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v3
  
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: ${{ secrets.REGION }}

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Terraform Init
          working-directory: IaaC
          run: terraform init

        - name: Terraform Validate
          working-directory: IaaC
          run: terraform validate

        - name: Terraform Apply
          working-directory: IaaC
          run: terraform apply -auto-approve

        - name: Upload ingestion_job.py to S3
          run: |
            aws s3 cp my-elt-pipeline/glue-script/tf_ingestion_job.py s3://tf-script-bucket-yc/ingestion/tf_ingestion_glue_job.py

        - name: Upload transformation_job.py to S3
          run: |
            aws s3 cp my-elt-pipeline/glue-script/tf_transformation_job.py s3://tf-script-bucket-yc/transformed/tf_transformation_glue_job.py

        - name: Start Glue Job tf_ingestion_glue_job
          id: start_ingestion
          run: |
            echo "Starting Glue job: tf_ingestion_glue_job"
            RUN_ID=$(aws glue start-job-run \
              --job-name tf_ingestion_glue_job \
              --query 'JobRunId' \
              --output text)
            echo "Glue tf_ingestion_glue_job started with Run ID: $RUN_ID"
            echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

        - name: Wait for tf_ingestion_glue_job to complete
          run: |
            echo "Waiting for tf_ingestion_glue_job to complete..."
            STATUS="STARTING"
            while [[ "$STATUS" == "STARTING" || "$STATUS" == "RUNNING" || "$STATUS" == "STOPPING" ]]; do
              STATUS=$(aws glue get-job-run \
                --job-name tf_ingestion_glue_job \
                --run-id ${{ steps.start_ingestion.outputs.run_id }} \
                --query 'JobRun.JobRunState' \
                --output text)
              echo "Current status: $STATUS"
              sleep 30
            done

            if [[ "$STATUS" != "SUCCEEDED" ]]; then
              echo "Ingestion job failed with status: $STATUS"
              exit 1
            fi

            echo "Ingestion job complete successfully."

        - name: Start and Wait for Glue Job tf_transformation_glue_job
          run: |
            echo "Starting Glue job: tf_transformation_glue_job"
            TRANSFORM_RUN_ID=$(aws glue start-job-run \
              --job-name tf_transformation_glue_job \
              --query 'JobRunId' \
              --output text)
            echo "Glue tf_transformation_glue_job started with Run ID: $TRANSFORM_RUN_ID"

            echo "Waiting for tf_transformation_glue_job to complete..."
            STATUS="STARTING"
            while [[ "$STATUS" == "STARTING" || "$STATUS" == "RUNNING" || "$STATUS" == "STOPPING" ]]; do
              STATUS=$(aws glue get-job-run \
                --job-name tf_transformation_glue_job \
                --run-id $TRANSFORM_RUN_ID \
                --query 'JobRun.JobRunState' \
                --output text)
              echo "Current status: $STATUS"
              sleep 30
            done

            if [[ "$STATUS" != "SUCCEEDED" ]]; then
              echo "Transformation job failed with status: $STATUS"
              exit 1
            fi

            echo "Transformation job completed successfully."

        - name: Start Glue Crawler
          run: |
            echo "Starting Glue Crawler: tf_automation_crawler"
            aws glue start-crawler --name tf_automation_crawler

        - name: Wait for Crawler to Finish
          run: |
            echo "Waiting for crawler to complete..."

            while true; do
              STATUS=$(aws glue get-crawler \
                --name tf_automation_crawler \
                --query 'Crawler.State' \
                --output text)

              echo "Current crawler status: $STATUS"

              if [[ "$STATUS" == "READY" ]]; then
                echo "Crawler completed successfully."
                break
              elif [[ "$STATUS" == "FAILED" ]]; then
                echo "Crawler failed."
                exit 1
              fi

              sleep 30
            done
